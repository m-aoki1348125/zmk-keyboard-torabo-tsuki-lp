#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    trackball_scroll_mapper: trackball_scroll_mapper {
        compatible = "zmk,input-processor-code-mapper";
        #input-processor-cells = <0>;
        type = <INPUT_EV_REL>;
        map = <INPUT_REL_X INPUT_REL_HWHEEL>, <INPUT_REL_Y INPUT_REL_WHEEL>;
    };

    combos {
        compatible = "zmk,combos";

        bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <28 29>;
        };

        // Mouse layer combos for quick actions

        mouse_copy {
            bindings = <&kp LC(C)>;
            key-positions = <27 28>;
        };

        mouse_paste {
            bindings = <&kp LC(V)>;
            key-positions = <28 29>;
        };

        mouse_undo {
            bindings = <&kp LC(Z)>;
            key-positions = <26 27>;
        };

        mouse_redo {
            bindings = <&kp LC(Y)>;
            key-positions = <29 30>;
        };

        // Test: Simple mouse layer toggle

        mouse_layer_toggle {
            bindings = <&tog 1>;
            key-positions = <25 26>;
            layers = <0>;
        };

        // Test: Direct mouse layer access

        mouse_layer_direct {
            bindings = <&to 1>;
            key-positions = <26 27>;
            layers = <0>;
        };

        // Direct scroll layer access

        scroll_layer_direct {
            bindings = <&to 2>;
            key-positions = <24 25>;
            layers = <0>;
        };

        // Quick layer switch to scroll layer

        scroll_layer_toggle {
            bindings = <&tog 2>;
            key-positions = <32 33>;
            layers = <0>;
        };

        // Switch from mouse layer to scroll layer

        mouse_to_scroll {
            bindings = <&to 2>;
            key-positions = <30 31>;
        };

        // Enhanced scroll operations in scroll layer

        fast_scroll_up {
            bindings = <&scroll_tp>;
            key-positions = <18 19>;
        };

        precision_zoom {
            bindings = <&kp LC(N0)>;
            key-positions = <16 17>;
        };
    };

    // Custom behaviors for advanced mouse functionality

    behaviors {
        mouse_tp: mouse_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mkp LCLK>, <&mkp LCLK>, <&mkp LCLK>;
        };

        scroll_tp: scroll_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_UP>, <&msc SCRL_UP>;
        };

        // DPI adjustment behavior (using output selection as example)

        dpi_low: dpi_low_behavior {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap>, <&out OUT_USB>;
        };

        dpi_high: dpi_high_behavior {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap>, <&out OUT_BLE>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&none  &none         &none         &none  &none  &none                                                     &none             &none      &none        &none         &none                 &none
&none  &kp Q         &kp W         &kp E  &kp R  &kp T                                                     &kp Y             &kp U      &kp I        &kp O         &kp P                 &none
&none  &kp A         &kp S         &kp D  &kp F  &kp G             &none                 &none             &kp H             &kp J      &kp K        &kp L         &kp MINUS             &none
&none  &kp Z         &kp X         &kp C  &kp V  &kp B             &kp BACKSPACE         &kp DEL           &kp N             &kp M      &lt 1 COMMA  &lt 2 PERIOD  &mt RIGHT_SHIFT FSLH  &none
&none  &kp LEFT_GUI  &kp LEFT_ALT  &none  &none  &lt 3 LANGUAGE_2  &mt LEFT_SHIFT SPACE  &mt RSHIFT LC(M)  &lt 4 LANGUAGE_1  &kp ENTER  &kp RALT     &kp RGUI      &kp RCTRL             &none
            >;
        };

        mouse {
            bindings = <
&to 0  &none         &none               &none     &none                &none                                                          &none        &none     &none      &none     &none                 &to 0
&none  &kp Q         &kp LA(LEFT_ARROW)  &mkp MB3  &kp LA(RIGHT_ARROW)  &kp T                                                          &kp Y        &kp U     &kp I      &kp O     &kp P                 &none
&none  &kp A         &mo 2               &mkp MB2  &mkp MB1             &kp G             &none                 &none                  &kp H        &kp J     &kp K      &kp L     &kp MINUS             &none
&none  &kp Z         &kp X               &kp C     &kp V                &kp B             &to 0                 &kp DEL                &kp N        &kp M     &kp COMMA  &kp DOT   &mt RIGHT_SHIFT FSLH  &none
&none  &kp LEFT_GUI  &kp LEFT_ALT        &none     &none                &lt 0 LANGUAGE_2  &mt LEFT_SHIFT SPACE  &mt RSHIFT LANGUAGE_2  &lt 0 ENTER  &kp BSPC  &kp RALT   &kp RGUI  &kp RCTRL             &none
            >;
        };

        scroll {
            bindings = <
&none  &none         &none         &none  &none  &none                                                          &none        &none     &none      &none     &none                 &none
&none  &kp Q         &kp W         &kp E  &kp R  &kp T                                                          &kp Y        &kp U     &kp I      &kp O     &kp P                 &none
&none  &kp A         &kp S         &kp D  &kp F  &kp G             &none                 &none                  &kp H        &kp J     &kp K      &kp L     &kp MINUS             &none
&none  &kp Z         &kp X         &kp C  &kp V  &kp B             &kp ESCAPE            &kp DEL                &kp N        &kp M     &kp COMMA  &kp DOT   &mt RIGHT_SHIFT FSLH  &none
&none  &kp LEFT_GUI  &kp LEFT_ALT  &none  &none  &lt 0 LANGUAGE_2  &mt LEFT_SHIFT SPACE  &mt RSHIFT LANGUAGE_2  &lt 0 ENTER  &kp BSPC  &kp RALT   &kp RGUI  &kp RCTRL             &none
            >;
        };

        num {
            bindings = <
&none  &none               &none               &none             &none                &none                                                          &none        &none     &none      &none       &none                 &none
&none  &mo 6               &kp W               &kp UP_ARROW      &kp R                &kp T                                                          &kp ASTRK    &kp N7    &kp N8     &kp N9      &kp PLUS              &none
&none  &kp HOME            &kp LEFT_ARROW      &kp DOWN_ARROW    &kp RIGHT_ARROW      &kp END           &none                 &none                  &kp EQUAL    &kp N4    &kp N5     &kp N6      &kp MINUS             &none
&none  &kp LG(DOWN_ARROW)  &kp LG(LEFT_ARROW)  &kp LG(UP_ARROW)  &kp LG(RIGHT_ARROW)  &kp B             &kp ESCAPE            &kp DEL                &kp N0       &kp N1    &kp N2     &kp N3      &mt RIGHT_SHIFT FSLH  &none
&none  &kp LEFT_GUI        &kp LEFT_ALT        &none             &none                &lt 0 LANGUAGE_2  &mt LEFT_SHIFT SPACE  &mt RSHIFT LANGUAGE_2  &lt 0 ENTER  &kp BSPC  &kp TILDE  &kp PERIOD  &kp RCTRL             &none
            >;
        };

        symbol {
            bindings = <
&none  &none              &none                 &none                 &none                  &none                                                          &none        &none       &none       &none       &none                 &none
&none  &kp GRAVE          &kp CARET             &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE                                                       &kp Y        &kp RS(N7)  &kp LS(N8)  &kp LS(N9)  &kp LS(N0)            &none
&none  &kp DOUBLE_QUOTES  &kp TILDE             &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp COLON         &none                 &none                  &kp H        &kp RS(N4)  &kp RS(N5)  &kp RS(N6)  &kp MINUS             &none
&none  &kp SINGLE_QUOTE   &kp NON_US_BACKSLASH  &kp LBKT              &kp RBKT               &kp SEMI          &kp ESCAPE            &kp DEL                &kp N        &kp RS(N1)  &kp RS(N2)  &kp RS(N3)  &mt RIGHT_SHIFT FSLH  &none
&none  &kp LEFT_GUI       &kp LEFT_ALT          &none                 &none                  &lt 0 LANGUAGE_2  &mt LEFT_SHIFT SPACE  &mt RSHIFT LANGUAGE_2  &lt 0 ENTER  &kp BSPC    &kp RALT    &kp RGUI    &kp RCTRL             &none
            >;
        };

        func {
            bindings = <
&trans  &trans   &trans  &trans    &trans    &trans                  &trans  &trans  &trans  &trans  &trans   &trans
&trans  &kp ESC  &trans  &mkp MB3  &trans    &trans                  &trans  &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans  &kp TAB  &trans  &mkp MB2  &mkp MB1  &trans  &trans  &trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &trans   &trans  &trans    &trans    &trans  &trans  &trans  &trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans
&trans  &trans   &trans  &trans    &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &trans
            >;
        };

        layer_5 {
            bindings = <
&none  &none         &none         &none         &none         &none                                                          &none        &none     &none        &none         &none                 &none
&none  &none         &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                                   &kp Y        &kp U     &kp I        &kp O         &kp P                 &none
&none  &kp A         &kp S         &kp D         &kp F         &kp G             &none                 &none                  &kp H        &kp J     &kp K        &kp L         &kp MINUS             &none
&none  &kp Z         &kp X         &kp C         &kp V         &kp B             &bt BT_CLR_ALL        &kp DEL                &kp N        &kp M     &lt 1 COMMA  &lt 2 PERIOD  &mt RIGHT_SHIFT FSLH  &none
&none  &kp LEFT_GUI  &kp LEFT_ALT  &none         &none         &lt 0 LANGUAGE_2  &mt LEFT_SHIFT SPACE  &mt RSHIFT LANGUAGE_2  &lt 0 ENTER  &kp BSPC  &kp RALT     &kp RGUI      &kp RCTRL             &none
            >;
        };
    };
};
