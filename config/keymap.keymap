#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/mouse.h>

/ {
    combos {
        compatible = "zmk,combos";

        bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <28 29>;
            layers = <2>;
        };

        // Mouse layer combos for quick actions
        mouse_copy {
            bindings = <&kp LC(C)>;
            key-positions = <27 28>;
            layers = <1>;
        };

        mouse_paste {
            bindings = <&kp LC(V)>;
            key-positions = <28 29>;
            layers = <1>;
        };

        mouse_undo {
            bindings = <&kp LC(Z)>;
            key-positions = <26 27>;
            layers = <1>;
        };

        mouse_redo {
            bindings = <&kp LC(Y)>;
            key-positions = <29 30>;
            layers = <1>;
        };

        // Quick layer switch to mouse layer from any layer
        mouse_layer_toggle {
            bindings = <&tog 1>;
            key-positions = <25 26>;
            layers = <0 2 3>;
        };
    };

    // Custom behaviors for advanced mouse functionality
    behaviors {
        mouse_tp: mouse_tap {
            compatible = "zmk,behavior-tap-dance";
            #tap-dance-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mkp LCLK>, <&mkp LCLK>, <&mkp LCLK>;
        };

        scroll_tp: scroll_tap {
            compatible = "zmk,behavior-tap-dance";
            #tap-dance-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_UP>, <&msc SCRL_UP>;
        };

        // DPI adjustment behavior (using output selection as example)
        dpi_low: dpi_low_behavior {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap &out OUT_USB>;
        };

        dpi_high: dpi_high_behavior {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap &out OUT_BLE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&kp ESC    &kp N1        &kp N2    &kp N3    &kp N4    &kp N5                                                         &kp N6       &kp N7    &kp N8     &kp N9    &kp N0                &kp BSPC
&kp TAB    &kp Q         &kp W     &kp E     &kp R     &kp T                                                          &kp Y        &kp U     &kp I      &kp O     &kp P                 &kp BSPC
&kp CAPS   &kp A         &kp S     &kp D     &kp F     &kp G        &mkp LCLK                  &mkp RCLK              &kp H        &kp J     &kp K      &kp L     &kp SEMI              &kp SQT
&kp LSHFT  &kp Z         &kp X     &kp C     &kp V     &kp B        &kp SPACE                  &kp RET                &kp N        &kp M     &kp COMMA  &kp DOT   &mt RIGHT_SHIFT FSLH  &kp RSHFT
&kp LCTRL  &kp LEFT_GUI  &kp LGUI  &kp LALT  &kp BSPC  &lt 2 SPACE  &mt LEFT_SHIFT LANGUAGE_1  &mt RSHIFT LANGUAGE_2  &lt 3 ENTER  &kp BSPC  &kp RALT   &kp RGUI  &kp RCTRL             &kp RCTRL
            >;
        };

        mouse_layer {
            bindings = <
&to 0      &kp K_BACK    &kp K_FORWARD &kp C_AC_REFRESH &kp C_AC_ZOOM_IN &kp C_AC_ZOOM_OUT                       &msc SCRL_UP   &msc SCRL_UP   &msc SCRL_UP   &kp C_VOL_UP   &kp C_VOL_DN  &kp C_MUTE
&kp TAB    &kp LC(Z)     &kp LC(X)     &kp LC(C)        &kp LC(V)        &kp LC(Y)                               &msc SCRL_LEFT &msc SCRL_DOWN &msc SCRL_UP   &msc SCRL_RIGHT &kp K_APP    &kp DEL
&kp LCTRL  &kp LGUI      &kp LALT      &kp LSHFT        &mkp LCLK        &mkp RCLK        &mkp LCLK    &mkp RCLK  &mkp LCLK      &mkp RCLK      &mkp MCLK      &kp RSHFT      &kp RALT     &kp RGUI
&tog 1     &kp LC(LA(Z)) &kp LC(LA(X)) &kp LC(LA(C))    &kp LC(LA(V))    &kp LC(LA(Y))    &mkp MB4     &mkp MB5   &msc SCRL_DOWN &msc SCRL_DOWN &msc SCRL_DOWN &kp RCTRL      &mo 2        &mo 3
&trans     &trans        &trans        &trans           &mkp LCLK        &mkp RCLK        &mkp LCLK    &mkp RCLK  &mkp MCLK      &mkp RCLK      &trans         &trans         &trans       &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &trans            &trans            &trans      &trans      &trans                      &trans          &trans         &trans            &trans             &trans         &trans
&trans  &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)                  &kp LS(N6)      &kp LS(N7)     &kp LS(N8)        &kp LS(N9)         &kp LS(N0)     &trans
&trans  &kp N1            &kp N2            &kp N3      &kp N4      &kp N5      &trans  &trans  &kp LEFT_BRACE  &kp MINUS      &kp EQUAL         &kp RIGHT_BRACE    &kp COLON      &trans
&trans  &kp N6            &kp N7            &kp N8      &kp N9      &kp N0      &trans  &trans  &kp LS(MINUS)   &kp LS(EQUAL)  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH  &trans
&trans  &trans            &trans            &trans      &trans      &trans      &trans  &trans  &kp TAB         &kp DEL        &trans            &trans             &trans         &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans   &trans   &trans        &trans        &trans                      &trans            &trans     &trans         &trans     &trans      &trans
&trans  &kp F1   &kp F2   &kp F3        &kp F4        &kp F5                      &kp HOME          &kp PG_UP  &kp PAGE_DOWN  &kp END    &kp ESCAPE  &trans
&trans  &kp F6   &kp F7   &kp F8        &kp F9        &kp F10     &trans  &trans  &kp LEFT          &kp DOWN   &kp UP_ARROW   &kp RIGHT  &kp TAB     &trans
&trans  &kp F11  &kp F12  &out OUT_USB  &out OUT_BLE  &bt BT_NXT  &trans  &trans  &kp SINGLE_QUOTE  &kp DQT    &kp GRAVE      &kp TILDE  &kp PIPE    &trans
&trans  &trans   &trans   &trans        &kp DELETE    &kp TAB     &trans  &trans  &trans            &trans     &trans         &trans     &trans      &trans
            >;
        };
    };
};
